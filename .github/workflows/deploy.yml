name: Deploy LDAP Client

on:
  pull_request:
    branches:
      - main
    paths:
      - 'docker/client/**'  # Only trigger when client files change

jobs:
  deploy-client:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Fetch LDAP Server IP
        id: get-ldap-server-ip
        run: |
          # Get the most recent instance with the LDAPServer tag
          SERVER_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=LDAPServer" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].[LaunchTime,PublicIpAddress]" \
            --output text | sort -r | head -n 1 | awk '{print $2}')
          
          # Check if we got a valid IP
          if [[ -z "$SERVER_IP" ]]; then
            echo "Error: Could not find running instance with tag LDAPServer"
            exit 1
          fi
          
          # Set the environment variable correctly
          echo "LDAP_SERVER_IP=${SERVER_IP}" >> $GITHUB_ENV
          echo "Found LDAP Server IP: ${SERVER_IP}"

      - name: Create .env file for client
        run: |
          cat > docker/client/.env << EOF
          # LDAP Environment Configuration
          LDAP_BASE="${{ vars.LDAP_BASE_DN }}"
          LDAP_DOMAIN="${{ vars.LDAP_DOMAIN }}"
          LDAP_ORG="${{ vars.LDAP_ORG }}"
          SSH_PORT=2222
          LDAP_CERT_SUBJ="/C=US/ST=IN/L=City/O=${{ vars.LDAP_ORG }}/CN=localhost"
          LDAP_URI="ldaps://${{ env.LDAP_SERVER_IP }}:${{ vars.LDAP_PORT }}"
          LDAP_CERT="/certificates/ca-cert.pem"
          LDAP_CA_CERT="${{ secrets.LDAP_CERT_CONTENT }}"
          EOF
          
          echo "Created client .env file with LDAP Server IP: ${{ env.LDAP_SERVER_IP }}"
          cat docker/client/.env | grep -v "LDAP_CA_CERT"
      
      - name: Build and push Docker image
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          context: ./docker/client
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/ldap-client:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/ldap-client:latest

      - name: Fetch EC2 Client Instance
        id: get-ec2-client
        run: |
          # Get the most recent instance with the LDAPClient tag
          IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=LDAPClient" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].[LaunchTime,PublicIpAddress]" \
            --output text | sort -r | head -n 1 | awk '{print $2}')
          
          # Check if we got a valid IP
          if [[ -z "$IP" ]]; then
            echo "Error: Could not find running instance with tag LDAPClient"
            exit 1
          fi
          
          # Set the environment variable correctly
          echo "CLIENT_EC2_IP=${IP}" >> $GITHUB_ENV
          echo "Found Client IP: ${IP}"
      
      - name: Wait for EC2 to be ready
        run: sleep 30 # Ensure system is ready
        
      - name: Deploy client to EC2
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem
          
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ env.CLIENT_EC2_IP }} << 'EOSSH'
          # Login to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Pull the latest client image
          docker pull ${{ steps.login-ecr.outputs.registry }}/ldap-client:latest
          
          # Stop any running client container
          docker stop ldap-client || true
          docker rm ldap-client || true
          
          # Run the new container
          docker run -d --name ldap-client \
            -p 2222:2222 \
            --restart unless-stopped \
            ${{ steps.login-ecr.outputs.registry }}/ldap-client:latest
          
          # Verify the container is running
          docker ps | grep ldap-client
          EOSSH
          
      - name: Output Deployment Information
        run: |
          echo "=============== DEPLOYMENT SUMMARY ==============="
          echo "LDAP Server IP: ${{ env.LDAP_SERVER_IP }}"
          echo "LDAP Client IP: ${{ env.CLIENT_EC2_IP }}"
          echo ""
          echo "LDAP Client deployed successfully!"
          echo "SSH accessible at: ssh -p 2222 user@${{ env.CLIENT_EC2_IP }}"
          echo ""
          echo "LDAP connectivity configured from Client to Server at ldaps://${{ env.LDAP_SERVER_IP }}:${{ vars.LDAP_PORT }}"
          echo "=================================================="