name: Deploy LDAP Infrastructure

on:
  pull_request:
    branches:
      - main

jobs:
  deploy-server:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Fetch AMI ID for Amazon Linux
        id: fetch_ami
        run: |
          os_filter="al2023-ami-*-x86_64"
          owners="137112412989" # Amazon Linux owner ID
          
          ami_id=$(aws ec2 describe-images \
            --filters "Name=name,Values=$os_filter" "Name=state,Values=available" \
            --owners $owners \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
            --output text)

          if [ -z "$ami_id" ]; then
            echo "Failed to find valid AMI ID"
            exit 1
          fi

          echo "ami_id=$ami_id" >> "$GITHUB_ENV"

      - name: Initialize Terraform
        run: cd terraform && terraform init
        
      - name: Apply Terraform Configuration
        run: |
          cd terraform
          terraform apply -auto-approve -var="ami_id=${{ env.ami_id }}"
        
      - name: Fetch EC2 Instance Public IP
        id: get-ec2-ip
        run: |
          # Get the most recent instance with the LDAPServer tag
          IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=LDAPServer" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --output text | head -n 1)
          
          # Check if we got a valid IP
          if [[ -z "$IP" ]]; then
            echo "Error: Could not find running instance with tag LDAPServer"
            exit 1
          fi
          
          # Set the environment variable correctly
          echo "EC2_IP=${IP}" >> $GITHUB_ENV
          echo "Found Server IP: ${IP}"
          
      - name: Wait for EC2 to be ready
        run: sleep 50 # Ensure system is ready
        
      - name: Create .env file locally
        run: |
          cat > .env << EOF
          DB_TYPE=${{ vars.DB_TYPE }}
          MONGO_URI=${{ secrets.MONGO_URI }}
          MONGO_DATABASE=${{ vars.MONGO_DATABASE }}
          LDAP_BASE_DN=${{ vars.LDAP_BASE_DN }}
          LDAP_PORT=${{ vars.LDAP_PORT }}
          LDAP_CERT_CONTENT="${{ secrets.LDAP_CERT_CONTENT }}"
          LDAP_KEY_CONTENT="${{ secrets.LDAP_KEY_CONTENT }}"
          LDAP_URL=${{ secrets.LDAP_URL }}
          EOF
          
          echo "Created .env file"
          
      - name: Deploy app to EC2
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem
          
          # First, clone the repository and set up the directory
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ env.EC2_IP }} << 'EOSSH'
          # Clone the repository
          if [ -d "/home/ec2-user/LDAPServer" ]; then
            rm -rf /home/ec2-user/LDAPServer
          fi
          git clone https://github.com/anishapant21/LDAPServer.git /home/ec2-user/LDAPServer
          EOSSH
          
          # Now copy the .env file to the server - place it in the src directory
          scp -o StrictHostKeyChecking=no -i ec2-key.pem .env ec2-user@${{ env.EC2_IP }}:/home/ec2-user/LDAPServer/src/.env
          
          # Finally, install dependencies and start the server
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ env.EC2_IP }} << 'EOSSH'
          # Install dependencies and start the Node.js server
          cd /home/ec2-user/LDAPServer/src
          npm install
          
          # Kill any existing node process
          pkill -f "node server.js" || true
          
          # Start the server (already in the src directory)
          nohup sudo node server.js > server.log 2>&1 &
          
          # Verify the server has started
          sleep 5
          if pgrep -f "node server.js" > /dev/null; then
            echo "Server started successfully"
            ps aux | grep "node server.js" | grep -v grep
          else
            echo "Server failed to start"
            tail -n 20 server.log 
          fi
          EOSSH
          
      - name: Output EC2 Instance Public IP
        run: echo "LDAP Server running at http://${{ env.EC2_IP }}"
    
    outputs:
      server_ip: ${{ env.EC2_IP }}

  deploy-client:
    needs: deploy-server  # This ensures the client job runs after server deployment
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Create ECR Repository if it doesn't exist
        run: |
          # Check if the repository exists
          if ! aws ecr describe-repositories --repository-names ldap-client 2>/dev/null; then
            echo "Creating ECR repository ldap-client..."
            aws ecr create-repository --repository-name ldap-client
            echo "Repository created successfully"
          else
            echo "Repository ldap-client already exists"
          fi
      
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Create .env file for client
        run: |
          # Get the server IP from the previous job
          SERVER_IP="${{ needs.deploy-server.outputs.server_ip }}"
          
          cat > docker/client/.env << EOF
          # LDAP Environment Configuration
          LDAP_BASE="${{ vars.LDAP_BASE_DN }}"
          LDAP_DOMAIN="${{ vars.LDAP_DOMAIN }}"
          LDAP_ORG="${{ vars.LDAP_ORG }}"
          SSH_PORT=2222
          LDAP_CERT_SUBJ="/C=US/ST=IN/L=City/O=${{ vars.LDAP_ORG }}/CN=localhost"
          LDAP_URI="ldaps://${SERVER_IP}:${{ vars.LDAP_PORT }}"
          LDAP_CERT="/certificates/ca-cert.pem"
          LDAP_CA_CERT="${{ secrets.LDAP_CERT_CONTENT }}"
          EOF
          
          echo "Created client .env file with LDAP Server IP: ${SERVER_IP}"
          cat docker/client/.env | grep -v "LDAP_CA_CERT"
      
      - name: Build and push Docker image to ECR
        run: |
          # Get ECR repository URI
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=ldap-client
          IMAGE_TAG=${{ github.sha }}
          
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./docker/client
          
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Image pushed to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
      
      - name: Create Client EC2 Instance
        run: |
          # Create a security group for the client
          echo "Creating security group for LDAP client..."
          SG_ID=$(aws ec2 create-security-group \
            --group-name LDAPClient-${{ github.run_id }} \
            --description "Security group for LDAP client" \
            --query 'GroupId' \
            --output text)
          
          # Allow SSH access
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr 0.0.0.0/0
            
          # Allow custom SSH port (2222)
          aws ec2 authorize-security-group-ingress \
            --group-id $SG_ID \
            --protocol tcp \
            --port 2222 \
            --cidr 0.0.0.0/0
          
          # Create a key pair or use an existing one
          KEY_NAME="ldap-client-key-${{ github.run_id }}"
          
          # Create the EC2 instance
          echo "Creating EC2 instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.ami_id }} \
            --instance-type t2.micro \
            --security-group-ids $SG_ID \
            --key-name ${{ secrets.EC2_KEY_NAME }} \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=LDAPClient}]" \
            --user-data "#!/bin/bash
              yum update -y
              yum install -y docker
              systemctl start docker
              systemctl enable docker
              usermod -aG docker ec2-user
              curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
              yum install -y unzip
              unzip awscliv2.zip
              ./aws/install
            " \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          echo "Waiting for instance to be running..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          
          # Get the public IP of the instance
          CLIENT_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          echo "CLIENT_IP=${CLIENT_IP}" >> $GITHUB_ENV
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
          echo "Created EC2 instance with IP: ${CLIENT_IP}"
      
      - name: Wait for EC2 instance to be ready
        run: |
          echo "Waiting for instance to be ready..."
          sleep 120  # Give the instance time to start up and install docker
      
      - name: Deploy client to EC2
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem
          
          # Try SSH connection with retry
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempting SSH connection (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i ec2-key.pem ec2-user@${{ env.CLIENT_IP }} echo "SSH connection successful"; then
              break
            fi
            RETRY_COUNT=$((RETRY_COUNT+1))
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Failed to establish SSH connection after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "SSH connection failed, retrying in 30 seconds..."
            sleep 30
          done
          
          # Deploy the container
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ env.CLIENT_IP }} << EOSSH
          # Wait for Docker to be ready
          echo "Waiting for Docker to be ready..."
          while ! docker info > /dev/null 2>&1; do
            sleep 10
            echo "Waiting for Docker service..."
          done
          
          # Configure AWS credentials
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region=us-east-1
          EOF
          
          # Login to ECR
          echo "Logging in to ECR..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Pull the latest client image
          echo "Pulling Docker image..."
          docker pull ${{ env.IMAGE_URI }}
          
          # Run the container
          echo "Starting the container..."
          docker run -d --name ldap-client \
            -p 2222:2222 \
            --restart unless-stopped \
            ${{ env.IMAGE_URI }}
          
          # Verify the container is running
          echo "Verifying container is running..."
          docker ps | grep ldap-client
          EOSSH
          
      - name: Output Client Deployment Info
        run: |
          echo "=============== DEPLOYMENT SUMMARY ==============="
          echo "LDAP Server IP: ${{ needs.deploy-server.outputs.server_ip }}"
          echo "LDAP Client IP: ${{ env.CLIENT_IP }}"
          echo "Client SSH accessible at: ssh -p 2222 user@${{ env.CLIENT_IP }}"
          echo "=================================================="