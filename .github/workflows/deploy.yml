name: Deploy LDAP Node.js Server

on:
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Initialize Terraform
        run: cd terraform && terraform init
        
      - name: Apply Terraform Configuration
        run: cd terraform && terraform apply -auto-approve
        
      - name: Fetch EC2 Instance Public IP
        id: get-ec2-ip
        run: |
          # Get the most recent instance with the LDAPServer tag
          IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=LDAPServer" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].[LaunchTime,PublicIpAddress]" \
            --output text | sort -r | head -n 1 | awk '{print $2}')
          
          # Check if we got a valid IP
          if [[ -z "$IP" ]]; then
            echo "Error: Could not find running instance with tag LDAPServer"
            exit 1
          fi
          
          # Set the environment variable correctly
          echo "EC2_IP=${IP}" >> $GITHUB_ENV
          echo "Found IP: ${IP}"
          
      - name: Wait for EC2 to be ready
        run: sleep 90 # Increased wait time to ensure system is ready
        
      - name: Deploy app to EC2
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem
          
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ env.EC2_IP }} << 'EOSSH'
            # Clone the repository (only done here, not in Terraform)
            if [ -d "/home/ec2-user/LDAPServer" ]; then
              rm -rf /home/ec2-user/LDAPServer
            fi
            
            git clone https://github.com/anishapant21/LDAPServer.git /home/ec2-user/LDAPServer
            
            # Create the .env file
            cat > /home/ec2-user/LDAPServer/.env << "EOT"
            DB_TYPE="${{ vars.DB_TYPE }}"
            MONGO_URI="${{ secrets.MONGO_URI }}"
            MONGO_DATABASE="${{ vars.MONGO_DATABASE }}"
            LDAP_BASE_DN="${{ vars.LDAP_BASE_DN }}"
            LDAP_PORT="${{ vars.LDAP_PORT }}"
            LDAP_CERT_CONTENT="${{ secrets.LDAP_CERT_CONTENT }}"
            LDAP_KEY_CONTENT="${{ secrets.LDAP_KEY_CONTENT }}"
            LDAP_URL="${{ secrets.LDAP_URL }}"
            EOT
            
            # Install dependencies and start the Node.js server
            cd /home/ec2-user/LDAPServer
            npm install
            
            # Kill any existing node process
            pkill -f "node server.js" || true
            
            # Start the server
            nohup node server.js > server.log 2>&1 &
            
            echo "Server started successfully"
          EOSSH
          
      - name: Output EC2 Instance Public IP
        run: echo "LDAP Server running at http://${{ env.EC2_IP }}"
