name: Deploy LDAP Node.js Server

on:
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Fetch AMI ID for Amazon Linux
        id: fetch_ami
        run: |
          os_filter="al2023-ami-*-x86_64"
          owners="137112412989"

          ami_id=$(aws ec2 describe-images \
            --filters "Name=name,Values=$os_filter" "Name=state,Values=available" \
            --owners $owners \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
            --output text)

          echo "ami_id=$ami_id" >> "$GITHUB_ENV"

      - name: Initialize Terraform
        run: cd terraform && terraform init
        
      - name: Apply Terraform Configuration
        run: |
          cd terraform
          terraform apply -auto-approve -var="ami_id=${{ env.ami_id }}"

      - name: Fetch EC2 Instances Public IPs
        id: get-ec2-ips
        run: |
          LDAP_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=LDAPServer" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)

          CLIENT_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=LDAPClient" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)

          echo "LDAP_IP=$LDAP_IP" >> $GITHUB_ENV
          echo "CLIENT_IP=$CLIENT_IP" >> $GITHUB_ENV

      - name: Wait for EC2 instances to be ready
        run: sleep 50

      - name: Output EC2 Instances Public IPs
        run: |
          echo "LDAP Server running at http://${{ env.LDAP_IP }}"
          echo "Client running at ${env.CLIENT_IP}:2222"
